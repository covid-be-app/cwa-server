name: ci-master
on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  tag-submission-image:
    name: "Tag the submission image on ECR with the master commit hash"
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials if this is a PR close
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TOOLING_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TOOLING_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: "Get tag of source image"
        id: get-src-tag
        run: |
          echo "::set-output name=srctag::${{ github.event.pull_request.head.sha }}"
          
      - name: "Pull image from ECR, tag it and push it"
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_HOST }}
          docker pull ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${{ steps.get-src-tag.outputs.srctag }}
          docker tag ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${{ steps.get-src-tag.outputs.srctag }} ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${GITHUB_SHA}
          docker push ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${GITHUB_SHA}

  deploy-stg-submission-int:
    name: "Deploy the internal submission service to the stg environment"
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    needs:
      - tag-submission-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STG_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Retrieve Task Definition for external service on STG
        run: |
          aws ecs describe-task-definition --task-definition "${{ secrets.ECS_TASK_FAMILY_SUBMISSION_STG }}-int" --query taskDefinition > task-definition.json
      - name: Set image name as output
        id: set-image-output
        run: |
          echo "::set-output name=image::${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${GITHUB_SHA}"
      - name: Update Task Definition for STG with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ secrets.ECS_CONTAINER_NAME_SUBMISSION_STG }}-int"
          image: "${{ steps.set-image-output.outputs.image }}"
      - name: Get service to update
        id: set-service-output
        run: |
          echo "::set-output name=service::$(aws ecs list-services --cluster ${{ secrets.CLUSTER_NAME_STG }} --output text | grep SubmissionInt | awk -F'/' '{print $2}')"
      - name: Deploy services with new task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ steps.set-service-output.outputs.service }}
          cluster: ${{ secrets.CLUSTER_NAME_STG }}
          wait-for-service-stability: false

  deploy-stg-submission-quartz:
    name: "Deploy the quartz submission service to the stg environment"
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    needs:
      - tag-submission-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STG_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Retrieve Task Definition for external service on STG
        run: |
          aws ecs describe-task-definition --task-definition "${{ secrets.ECS_TASK_FAMILY_SUBMISSION_STG }}-quartz" --query taskDefinition > task-definition.json
      - name: Set image name as output
        id: set-image-output
        run: |
          echo "::set-output name=image::${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${GITHUB_SHA}"
      - name: Update Task Definition for STG with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ secrets.ECS_CONTAINER_NAME_SUBMISSION_STG }}-quartz"
          image: "${{ steps.set-image-output.outputs.image }}"
      - name: Get service to update
        id: set-service-output
        run: |
          echo "::set-output name=service::$(aws ecs list-services --cluster ${{ secrets.CLUSTER_NAME_STG }} --output text | grep SubmissionQua | awk -F'/' '{print $2}')"
      - name: Deploy services with new task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ steps.set-service-output.outputs.service }}
          cluster: ${{ secrets.CLUSTER_NAME_STG }}
          wait-for-service-stability: false

  deploy-stg-submission:
    name: "Deploy the external submission service to the stg environment"
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    needs:
      - tag-submission-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STG_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Retrieve Task Definition for external service on STG
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_FAMILY_SUBMISSION_STG }} --query taskDefinition > task-definition.json
      - name: Show task definition
        run: |
          cat task-definition.json
      - name: Set image name as output
        id: set-image-output
        run: |
          echo "::set-output name=image::${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${GITHUB_SHA}"
      - name: Update Task Definition for STG with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ secrets.ECS_CONTAINER_NAME_SUBMISSION_STG }}"
          image: "${{ steps.set-image-output.outputs.image }}"
        env:
          IMAGE: "${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_SUBMISSION }}:${GITHUB_SHA}"
      - name: Get service to update
        id: set-service-output
        run: |
          echo "::set-output name=service::$(aws ecs list-services --cluster ${{ secrets.CLUSTER_NAME_STG }} --output text | grep Submission | grep -v Int | awk -F'/' '{print $2}')"
      - name: Deploy services with new task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ steps.set-service-output.outputs.service }}
          cluster: ${{ secrets.CLUSTER_NAME_STG }}
          wait-for-service-stability: false

  tag-distribution-image:
    name: "Tag the distribution image on ECR with the master commit hash"
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials if this is a PR close
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TOOLING_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TOOLING_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: "Get tag of source image"
        id: get-src-tag
        run: |
          echo "::set-output name=srctag::${{ github.event.pull_request.head.sha }}"
          
      - name: "Pull image from ECR, tag it and push it"
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_HOST }}
          docker pull ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DISTRIBUTION }}:${{ steps.get-src-tag.outputs.srctag }}
          docker tag ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DISTRIBUTION }}:${{ steps.get-src-tag.outputs.srctag }} ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DISTRIBUTION }}:${GITHUB_SHA}
          docker push ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DISTRIBUTION }}:${GITHUB_SHA}

  deploy-stg-distribution:
    name: "Deploy the distribution service to the stg environment"
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    needs:
      - tag-distribution-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STG_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Retrieve Task Definition for external service on STG
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_FAMILY_DISTRIBUTION_STG }} --query taskDefinition > task-definition.json
      - name: Show task definition
        run: |
          cat task-definition.json
      - name: Set image name as output
        id: set-image-output
        run: |
          echo "::set-output name=image::${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DISTRIBUTION }}:${GITHUB_SHA}"
      - name: Update Task Definition for STG with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ secrets.ECS_CONTAINER_NAME_DISTRIBUTION_STG }}"
          image: "${{ steps.set-image-output.outputs.image }}"
        env:
          IMAGE: "${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DISTRIBUTION }}:${GITHUB_SHA}"
      - name: Deploy new task definition
        id: deploy-task-definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: false
      - name: Determine scheduled task name
        id: get-scheduled-task-name
        run: |
          SCHEDULEDTASKNAME=$(aws events list-rules --query "Rules[*]|[?contains(Name,'Distr')].Name" --output text)
          echo "::set-output name=scheduledtaskname::${SCHEDULEDTASKNAME}"
      - name: Create new target config for the distribution scheduled task
        id: update-scheduled-task-distribution
        run: |
          aws events list-targets-by-rule --rule "${{ steps.get-scheduled-task-name.outputs.scheduledtaskname }}" > targetdef.orig.json
          jq '.Targets[0].EcsParameters.TaskDefinitionArn = "${{ steps.deploy-task-definition.outputs.task-definition-arn }}"' targetdef.orig.json > targetdef.json
          aws events put-targets --cli-input-json file://targetdef.json --rule "${{ steps.get-scheduled-task-name.outputs.scheduledtaskname }}"

  tag-download-image:
    name: "Tag the download image on ECR with the master commit hash"
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials if this is a PR close
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TOOLING_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TOOLING_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: "Get tag of source image"
        id: get-src-tag
        run: |
          echo "::set-output name=srctag::${{ github.event.pull_request.head.sha }}"
          
      - name: "Pull image from ECR, tag it and push it"
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_HOST }}
          docker pull ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DOWNLOAD }}:${{ steps.get-src-tag.outputs.srctag }}
          docker tag ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DOWNLOAD }}:${{ steps.get-src-tag.outputs.srctag }} ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DOWNLOAD }}:${GITHUB_SHA}
          docker push ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DOWNLOAD }}:${GITHUB_SHA}

  deploy-stg-download:
    name: "Deploy the download service to the stg environment"
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    needs:
      - tag-download-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STG_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Retrieve Task Definition for external service on STG
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_FAMILY_DOWNLOAD_STG }} --query taskDefinition > task-definition.json
      - name: Show task definition
        run: |
          cat task-definition.json
      - name: Set image name as output
        id: set-image-output
        run: |
          echo "::set-output name=image::${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DOWNLOAD }}:${GITHUB_SHA}"
      - name: Update Task Definition for STG with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ secrets.ECS_CONTAINER_NAME_DOWNLOAD_STG }}"
          image: "${{ steps.set-image-output.outputs.image }}"
        env:
          IMAGE: "${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_DOWNLOAD }}:${GITHUB_SHA}"
      - name: Deploy new task definition
        id: deploy-task-definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: false
      - name: Determine scheduled task name
        id: get-scheduled-task-name
        run: |
          SCHEDULEDTASKNAME=$(aws events list-rules --query "Rules[*]|[?contains(Name,'Downl')].Name" --output text)
          echo "::set-output name=scheduledtaskname::${SCHEDULEDTASKNAME}"
      - name: Create new target config for the download scheduled task
        id: update-scheduled-task-download
        run: |
          aws events list-targets-by-rule --rule "${{ steps.get-scheduled-task-name.outputs.scheduledtaskname }}" > targetdef.orig.json
          jq '.Targets[0].EcsParameters.TaskDefinitionArn = "${{ steps.deploy-task-definition.outputs.task-definition-arn }}"' targetdef.orig.json > targetdef.json
          aws events put-targets --cli-input-json file://targetdef.json --rule "${{ steps.get-scheduled-task-name.outputs.scheduledtaskname }}"

  tag-upload-image:
    name: "Tag the upload image on ECR with the master commit hash"
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials if this is a PR close
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TOOLING_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TOOLING_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: "Get tag of source image"
        id: get-src-tag
        run: |
          echo "::set-output name=srctag::${{ github.event.pull_request.head.sha }}"
          
      - name: "Pull image from ECR, tag it and push it"
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_HOST }}
          docker pull ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_UPLOAD }}:${{ steps.get-src-tag.outputs.srctag }}
          docker tag ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_UPLOAD }}:${{ steps.get-src-tag.outputs.srctag }} ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_UPLOAD }}:${GITHUB_SHA}
          docker push ${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_UPLOAD }}:${GITHUB_SHA}

  deploy-stg-upload:
    name: "Deploy the upload service to the stg environment"
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.action == 'closed' && github.event.pull_request.merged
    needs:
      - tag-upload-image
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STG_PUSHECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG_PUSHECR }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Retrieve Task Definition for external service on STG
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_FAMILY_UPLOAD_STG }} --query taskDefinition > task-definition.json
      - name: Show task definition
        run: |
          cat task-definition.json
      - name: Set image name as output
        id: set-image-output
        run: |
          echo "::set-output name=image::${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_UPLOAD }}:${GITHUB_SHA}"
      - name: Update Task Definition for STG with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ secrets.ECS_CONTAINER_NAME_UPLOAD_STG }}"
          image: "${{ steps.set-image-output.outputs.image }}"
        env:
          IMAGE: "${{ secrets.ECR_REPO_HOST }}/${{ secrets.ECR_REPO_NAME_UPLOAD }}:${GITHUB_SHA}"
      - name: Deploy new task definition
        id: deploy-task-definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: false
      - name: Determine scheduled task name
        id: get-scheduled-task-name
        run: |
          SCHEDULEDTASKNAME=$(aws events list-rules --query "Rules[*]|[?contains(Name,'Uplo')].Name" --output text)
          echo "::set-output name=scheduledtaskname::${SCHEDULEDTASKNAME}"
      - name: Create new target config for the upload scheduled task
        id: update-scheduled-task-upload
        run: |
          aws events list-targets-by-rule --rule "${{ steps.get-scheduled-task-name.outputs.scheduledtaskname }}" > targetdef.orig.json
          jq '.Targets[0].EcsParameters.TaskDefinitionArn = "${{ steps.deploy-task-definition.outputs.task-definition-arn }}"' targetdef.orig.json > targetdef.json
          aws events put-targets --cli-input-json file://targetdef.json --rule "${{ steps.get-scheduled-task-name.outputs.scheduledtaskname }}"

