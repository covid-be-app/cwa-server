package app.coronawarn.server.services.submission.covicode;

import static app.coronawarn.server.common.persistence.utils.CryptoUtils.decodeAesKey;
import static app.coronawarn.server.common.persistence.utils.CryptoUtils.generateHash;
import static java.lang.Byte.toUnsignedLong;
import static java.util.Arrays.copyOfRange;

import app.coronawarn.server.common.persistence.domain.covicodes.CoviCode;
import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class CoviCodeGenerator {

  private static final Logger logger = LoggerFactory.getLogger(CoviCodeGenerator.class);

  private static final int CODES_PER_INTERVAL = 200;
  private static final int MINUTES_IN_INTERVAL = 5;
  private static final int PERIODS = (24 * 60) / MINUTES_IN_INTERVAL;

  private final SubmissionServiceConfig submissionServiceConfig;


  public CoviCodeGenerator(SubmissionServiceConfig submissionServiceConfig) {
    this.submissionServiceConfig = submissionServiceConfig;
  }

  /**
   * Generate the CoviCodes.
   */
  public List<CoviCode> generateCoviCodes(LocalDate startDate) throws Exception {

    List<CoviCode> coviCodes = new ArrayList<>();

    LocalDateTime initial = startDate.atStartOfDay();

    for (int period = 0; period < PERIODS; period++) {

      int startMinuteOffset = period * 5;
      LocalDateTime startInterval = initial.plusMinutes(startMinuteOffset);
      LocalDateTime endInterval = startInterval.plusMinutes(5);

      for (int counter = 0; counter < CODES_PER_INTERVAL; counter++) {
        String code = generate12Digits(initial.toLocalDate(), period, counter);

        CoviCode coviCode = CoviCode.builder()
            .withCode(code)
            .withStartInterval(startInterval)
            .withEndInterval(endInterval)
            .build();

        coviCodes.add(coviCode);

      }
    }

    return coviCodes;
  }


  /**
   * Generate the 12 digit CoviCode.
   * <p>
   * The codes are generated by choosing a 128-bit secret key Kauth and computing the codes as follows:
   * </p>
   * <p>
   * SHA-2(Key, Salt, Info, OutputLength), with Key=Kauth, Salt = NULL, and OutputLength =5.
   * </p>
   * <p>
   * with Info = date || period || counter || UTF8(â€œAUTHORISATION CODE")
   * and 0 <= period <= 287 and 0 <= counter <= 199
   * </p>
   * <p>
   * The covicodes are computed from Output by converting the 40 output bits to a 12-digit integer:
   * first, one constructs an integer from the first 20 bits and reduces this integer modulo 106;
   * similar for the next 20 bits.
   * </p>
   */
  private String generate12Digits(LocalDate localDate, int period, int counter) throws Exception {

    String info = localDate.toString() + String.format("%03d", period) + String.format("%03d", counter);


    byte[] hash = generateHash(info, decodeAesKey(this.submissionServiceConfig.getCoviCode().getKey()));
    byte[] reducedHash = copyOfRange(hash, hash.length - 7, hash.length);

    long l1 = (toUnsignedLong(reducedHash[0]))
        + (toUnsignedLong(reducedHash[1]) << 8)
        + (((toUnsignedLong(reducedHash[2]) & 0xF) << 16));
    long l2 = (toUnsignedLong(reducedHash[2]) >> 4)
        + (toUnsignedLong(reducedHash[3]) << 4)
        + (toUnsignedLong(reducedHash[4]) << 12);

    return String.format("%06d%06d", l1 % 1000000, l2 % 1000000);

  }


}
